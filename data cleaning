import pandas as pd
import numpy as no
from matplotlib import pyplot as plt
%matplotlib inline
import matplotlib
matplotlib.rcParams['figure.figsize']=(20,10)

df1=pd.read_csv('Bengaluru_House_Data.csv')
df1.head()

df1.shape
#groupby data by area type and aggregate them by count
df1.groupby('area_type')['area_type'].agg('count')
df2=df1.drop(['area_type','society','availability','balcony'],axis='columns')
df2.head()
  #number of rows where particular rows/columns are NA
df2.isnull().sum()
  df3=df2.dropna()
df3.isnull().sum()
  #checking the rows and columns again after dropping all the NA values
df3.shape
  df3['size'].unique()
  #adding a new column of bhk in existing column
df3['bhk']=df3['size'].apply(lambda x: int(x.split(' ')[0]))
df3.head()
  df3[df3.bhk>20]
  df3.total_sqft.unique()
  def is_float(x):
  try:
    float(x)
  except:
      return False
  return True
        df3[~df3['total_sqft'].apply(is_float)].head(10)
        # for ignoring the meter and perch in total_sqft we apply this function which takes avg from the range
def convert_sqft_to_num(x):
  tokens = x.split('-')
  if len(tokens) == 2:
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None
        #converts in float
convert_sqft_to_num('2100')
        #converts in float
convert_sqft_to_num('2100')
        #takes the avg
convert_sqft_to_num('1015 - 1540')
        #it ignores this kind of value
convert_sqft_to_num('34.46Sq. Meter')
        df4=df3.copy()
df4['total_sqft'] = df4['total_sqft'].apply(convert_sqft_to_num)
df4.head(3)
        #acessing house by index
df4.loc[30]
        (2100+2850)/2
        df4.head(3)
        #Fearture engneering & dimensionality reduction (we are creating some new feauture )
#converting the price into price per sqft by taking new column in existing data
df5=df4.copy()
df5['price_per_sqft']=df5['price']*100000/df5['total_sqft']
df5.head()
        #dive in location
len(df5.location.unique())
        df5.location=df5.location.apply(lambda x: x.strip())
location_stats=df5.groupby('location')['location'].agg('count').sort_values(ascending=False)
print(location_stats)
        len(location_stats[location_stats<=10])
        location_stats_less_than_10=location_stats[location_stats<=10]
location_stats_less_than_10
        len(df5.location.unique())
        df5.location=df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
len(df5.location.unique())
        df5.head(10)
        #outlier detection
df5[df5.total_sqft/df5.bhk<300].head()
        df5.shape
        df6=df5[~(df5.total_sqft/df5.bhk<300)]
df6.shape
        #knowing price_per_sqft
df6.price_per_sqft.describe()
        #filtering out per plot by standard deviation and mean with some threshold sd
import numpy as np

def remove_pps_outliers(df):
  df_out = pd.DataFrame()
  for key, subdf in df.groupby('location'):
    m = np.mean(subdf.price_per_sqft)
    st = np.std(subdf.price_per_sqft)
    reduced_df = subdf[(subdf.price_per_sqft > (m - st)) & (subdf.price_per_sqft <= (m + st))]
    df_out = pd.concat([df_out, reduced_df], ignore_index=True)
  return df_out

df7 = remove_pps_outliers(df6)
df7.shape
        #scattering plot to check the ouliers in sqft v/s price
def plot_scatter_chart(df,location):
  bhk2=df[(df.location==location)&(df.bhk==2)]
  bhk3=df[(df.location==location)&(df.bhk==3)]
  matplotlib.rcParams['figure.figsize']=(15,10)
  plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK',s=50)
  plt.scatter(bhk3.total_sqft,bhk3.price,marker='+',color='green',label='3 BHK',s=50)
  plt.xlabel("Total Square Feet Area")
  plt.ylabel("Price")
  plt.title(location)
  plt.legend()

plot_scatter_chart(df7,"Hebbal")
        def remove_bhk_outliers(df):
  exclude_indices=np.array([])
  for location, location_df in df.groupby('location'):
    bhk_stats={}
    for bhk, bhk_df in location_df.groupby('bhk'):
      bhk_stats[bhk]={
          'mean':np.mean(bhk_df.price_per_sqft),
          'std':np.std(bhk_df.price_per_sqft),
          'count':bhk_df.shape[0]
      }
    for bhk, bhk_df in location_df.groupby('bhk'):
      stats=bhk_stats.get(bhk-1)
      if stats and stats['count']>5:
        exclude_indices=np.append(exclude_indices,bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
  return df.drop(exclude_indices,axis='index')

df8=remove_bhk_outliers(df7)
df8.shape
      #we will again plot the scatter plot to see the changes in that particular area

plot_scatter_chart(df8,"Hebbal")
      import matplotlib
matplotlib.rcParams['figure.figsize']=(20,10)
plt.hist(df8.price_per_sqft,rwidth=0.8)
plt.xlabel("Price Per Square Feet")
plt.ylabel("Count")
      df8.bath.unique()
      df8[df8.bath>10]
      plt.hist(df8.bath,rwidth=0.8)
plt.xlabel("Number of bathrooms")
plt.ylabel("Count")
      df8[df8.bath>df8.bhk+2]
      df9=df8[df8.bath<df8.bhk+2]
df9.shape
      df10=df9.drop(['size','price_per_sqft'],axis='columns')
df10.head()
      dummies=pd.get_dummies(df10.location)
dummies.head(3)
      df11=pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')
df11.head(3)
      df12=df11.drop('location',axis='columns')
df12.head(2)
      df12.shape
      x =df12.drop('price',axis='columns')
x.head()
      y=df12.price
y.head()
      from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=10)
  from sklearn.linear_model import LinearRegression
lr_clf = LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)
  #!pip install matplotlib-venn
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
cross_val_score(LinearRegression(), x, y, cv=cv)
  from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)

cross_val_score(LinearRegression(), x, y, cv=cv)
  from sklearn.model_selection import GridSearchCV

from sklearn.linear_model import Lasso
from sklearn.tree import DecisionTreeRegressor

def find_best_model_using_gridsearchcv(X,y):
    algos = {
        'linear_regression' : {
            'model': LinearRegression(),
            'params': {
                'fit_intercept': [True, False]
            }
        },
        'lasso': {
            'model': Lasso(),
            'params': {
                'alpha': [1,2],
                'selection': ['random', 'cyclic']
            }
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion' : ['squared_error','friedman_mse'],
                'splitter': ['best','random']
            }
        }
    }
    scores = []
    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(X,y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores,columns=['model','best_score','best_params'])

find_best_model_using_gridsearchcv(x,y)
      def predict_price(location,sqft,bath,bhk):
    loc_index = np.where(X.columns==location)[0][0]

    x = np.zeros(len(X.columns))
    x[0] = sqft
    x[1] = bath
    x[2] = bhk
    if loc_index >= 0:
        x[loc_index] = 1

    return lr_clf.predict([x])[0]
      import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV, ShuffleSplit
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.tree import DecisionTreeRegressor
import pickle

# Load your pre-trained model and data (assuming you have it saved as a pickle file)
# model = pickle.load(open('model.pkl', 'rb'))
# columns = pickle.load(open('columns.pkl', 'rb'))

# Sample DataFrame columns (replace with your actual columns)
columns = ['location', 'total_sqft', 'bath', 'bhk']

# Sample OneHotEncoder categories for demonstration (replace with your real categories)
locations = ['1st Phase JP Nagar', 'Indira Nagar', 'Whitefield']

def predict_price(location, sqft, bath, bhk):
    # Create an array of zeros with the size of the column list
    x = np.zeros(len(columns) + len(locations))

    # Set the values in the array
    x[0] = sqft
    x[1] = bath
    x[2] = bhk

    # Find the index of the location in the OneHotEncoded list
    if location in locations:
        loc_index = columns.index('location') + locations.index(location)
        x[loc_index] = 1

    # Assume `model` is already trained (replace with your model)
    model = LinearRegression()  # Replace with your loaded model
    model.fit(np.random.rand(100, len(x)), np.random.rand(100))  # Dummy fit for demo

    # Predict the price
    return model.predict([x])[0]

# Testing the function
print(predict_price('1st Phase JP Nagar', 1000, 2, 2))
print(predict_price('1st Phase JP Nagar', 1000, 3, 3))
print(predict_price('Indira Nagar', 1000, 2, 2))
print(predict_price('Indira Nagar', 1000, 3, 3))

  import pickle
with open('banglore_home_prices_model.pickle','wb') as f:
    pickle.dump(lr_clf,f)
  import json

# Assuming X is your DataFrame with column names
# Sample DataFrame for demonstration (replace with your own X)
import pandas as pd

# Example DataFrame (replace this with your actual DataFrame)
X = pd.DataFrame({
    'Location': ['1st Phase JP Nagar', 'Indira Nagar', 'Whitefield'],
    'Total_Sqft': [1000, 1500, 1200],
    'Bath': [2, 3, 2],
    'BHK': [2, 3, 2]
})

# Create a dictionary with column names in lowercase
columns = {
    'data_columns': [col.lower() for col in X.columns]
}

# Write the dictionary to a JSON file
with open("columns.json", "w") as f:
    json.dump(columns, f)

print("columns.json file has been created successfully!")
